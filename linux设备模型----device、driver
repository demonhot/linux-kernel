一.device结构体
struct device {
	struct device		*parent;    //父节点设备，一般是bus或者host controller，不推荐父节点为NULL

	struct device_private	*p;   //设备的私有数据指针，包含子设备链表，添加到parent/driver/bus中的链表节点等

	struct kobject kobj;    //kobject
	const char		*init_name; /* initial name of the device */    //设备初始化name
	const struct device_type *type;   //设备类型，描述设备类型和类型相互信息

	struct mutex		mutex;	/* mutex to synchronize calls to
					 * its driver.
					 */

	struct bus_type	*bus;		/* type of bus device is on */    //设备所在的总线
	struct device_driver *driver;	/* which driver has allocated this    //设备匹配的driver
					   device */
	void		*platform_data;	/* Platform specific data, device   //平台设备数据，通常为memory/irq/register
					   core doesn't touch it */
	struct dev_pm_info	power;      //电源相关
	struct dev_pm_domain	*pm_domain;   //pm

#ifdef CONFIG_PINCTRL
	struct dev_pin_info	*pins;    //pinctrl
#endif

#ifdef CONFIG_NUMA
	int		numa_node;	/* NUMA node this device is close to */
#endif
	u64		*dma_mask;	/* dma mask (if dma'able device) */   //DMA
	u64		coherent_dma_mask;/* Like dma_mask, but for
					     alloc_coherent mappings as
					     not all hardware supports
					     64 bit addresses for consistent
					     allocations such descriptors. */

	struct device_dma_parameters *dma_parms;

	struct list_head	dma_pools;	/* dma pools (if dma'ble) */

	struct dma_coherent_mem	*dma_mem; /* internal for coherent mem
					     override */
#ifdef CONFIG_CMA
	struct cma *cma_area;		/* contiguous memory area for dma
					   allocations */
#endif
	/* arch specific additions */
	struct dev_archdata	archdata;

	struct device_node	*of_node; /* associated device tree node */   //设备树节点
	struct acpi_dev_node	acpi_node; /* associated ACPI device node */

	dev_t			devt;	/* dev_t, creates the sysfs "dev" */    //设备号，由主次设备号组成
	u32			id;	/* device instance */   //设备命名相关

	spinlock_t		devres_lock;    //申请devres资源时的自旋锁
	struct list_head	devres_head;    //设备资源链表，设备释放时，链表中的资源将会自动释放

	struct klist_node	knode_class;    //添加到class链表中的节点
	struct class		*class;   //设备所属的class
	const struct attribute_group **groups;	/* optional groups */   //属性集合

	void	(*release)(struct device *dev);   //设备释放回调函数
	struct iommu_group	*iommu_group;
};

二.device_type结构体
设备的类型，class或者bus包含各种类型的设备，比如“分区”和“磁盘”，“鼠标”和“事件”。device & device_type的关系类似于kobject & kobj_type的关系
struct device_type {
	const char *name;   //如果设定name，uevent上报时将其加入到DEVTYPE变量中
	const struct attribute_group **groups;
	int (*uevent)(struct device *dev, struct kobj_uevent_env *env);   //上报uevent
	char *(*devnode)(struct device *dev, umode_t *mode,
			 kuid_t *uid, kgid_t *gid);
	void (*release)(struct device *dev);    //设备release回调函数

	const struct dev_pm_ops *pm;    //电源相关操作
};

三.device相关API
设备初始化：device_initialize
设备注册内核：device_add
设备初始化+注册内核：device_register
设备分配+初始化+注册内核：device_create
在/sys/devices下创建dummy设备：root_device_register
/*
 * 指定kset为devices_kset,devices_init中定义此kset，devices_kset = kset_create_and_add("devices", &device_uevent_ops, NULL);
 * 在/sys/下生成/sys/devices目录
 * kobject初始化，ktype设定为device_ktype
 * ...其他一系列初始化
 */
void device_initialize(struct device *dev)
{
	dev->kobj.kset = devices_kset;
	kobject_init(&dev->kobj, &device_ktype);
	INIT_LIST_HEAD(&dev->dma_pools);
	mutex_init(&dev->mutex);
	lockdep_set_novalidate_class(&dev->mutex);
	spin_lock_init(&dev->devres_lock);
	INIT_LIST_HEAD(&dev->devres_head);
	device_pm_init(dev);
	set_dev_node(dev, -1);
}

/*
 * 117-121，判断device->p是否存在，否则进行初始化
 * 129-132，定义init_name，则设置为kobject的name，并将init_name置为NULL，强制使用dev_name函数获取device的name
 * 137-143，未定义name，则使用bus->devname##dev->id进行枚举
 * 147-150，增加父设备引用次数及其获取父设备的kobject
 * 159-161，注册kobject到文件系统
 * 169-176，在设备文件目录下创建uevent&dev文件，uevent环境变量，dev主次设备号,device_create_file调用sysfs_create_file
 * 180，在/sys/dev/char/或者/sys/dev/block/创建devt的属性的连接文件,形如10:45,由主设备号和次设备号构成,指向/sys/devices/.../的具体设备目录,
 * 该链接文件只具备读属性，显示主设备号：次设备号，如10:45,用户空间udev相应uevent事件时，将根据设备号在/dev下创建节点文件
 * 185，相互创建dev和class之间的链接文件
 * 191，创建设备属性文件
 * 195，添加设备到总线上，将设备添加到总线的设备链表中
 * 211，产生ADD uevent事件，上报到用户空间
 * 213，在总线上寻到匹配的driver，根据总线的match函数进行匹配
 * 214-222，将设备链表节点添加到parent和class的链表中
 */
int device_add(struct device *dev)
{
	struct device *parent = NULL;
	struct kobject *kobj;
	struct class_interface *class_intf;
	int error = -EINVAL;

	dev = get_device(dev);
	if (!dev)
		goto done;

	if (!dev->p) {
		error = device_private_init(dev);
		if (error)
			goto done;
	}

	/*
	 * for statically allocated devices, which should all be converted
	 * some day, we need to initialize the name. We prevent reading back
	 * the name, and force the use of dev_name()
	 */
	if (dev->init_name) {
		dev_set_name(dev, "%s", dev->init_name);
		dev->init_name = NULL;
	}

	/* subsystems can specify simple device enumeration */
	if (!dev_name(dev) && dev->bus && dev->bus->dev_name)
		dev_set_name(dev, "%s%u", dev->bus->dev_name, dev->id);

	if (!dev_name(dev)) {
		error = -EINVAL;
		goto name_error;
	}

	pr_debug("device: '%s': %s\n", dev_name(dev), __func__);

	parent = get_device(dev->parent);
	kobj = get_device_parent(dev, parent);
	if (kobj)
		dev->kobj.parent = kobj;

	/* use parent numa_node */
	if (parent)
		set_dev_node(dev, dev_to_node(parent));

	/* first, register with generic layer. */
	/* we require the name to be set before, and pass NULL */
	error = kobject_add(&dev->kobj, dev->kobj.parent, NULL);
	if (error)
		goto Error;

	/* notify platform of device entry */
	if (platform_notify)
		platform_notify(dev);

	error = device_create_file(dev, &uevent_attr);
	if (error)
		goto attrError;

	if (MAJOR(dev->devt)) {
		error = device_create_file(dev, &devt_attr);
		if (error)
  			goto ueventattrError;

		error = device_create_sys_dev_entry(dev);
		if (error)
			goto devtattrError;

		devtmpfs_create_node(dev);
	}

	error = device_add_class_symlinks(dev);
	if (error)
		goto SymlinkError;
	error = device_add_attrs(dev);
	if (error)
		goto AttrsError;
	error = bus_add_device(dev);
	if (error)
		goto BusError;
	error = dpm_sysfs_add(dev);
	if (error)
		goto DPMError;
	device_pm_add(dev);

	/* Notify clients of device addition.  This call must come
	 * after dpm_sysfs_add() and before kobject_uevent().
	 */
	if (dev->bus)
		blocking_notifier_call_chain(&dev->bus->p->bus_notifier,
					     BUS_NOTIFY_ADD_DEVICE, dev);

	kobject_uevent(&dev->kobj, KOBJ_ADD);
	bus_probe_device(dev);
	if (parent)
		klist_add_tail(&dev->p->knode_parent,
			       &parent->p->klist_children);

	if (dev->class) {
		mutex_lock(&dev->class->p->mutex);
		/* tie the class to the device */
		klist_add_tail(&dev->knode_class,
			       &dev->class->p->klist_devices);

		/* notify any interfaces that the device is here */
		list_for_each_entry(class_intf,
				    &dev->class->p->interfaces, node)
			if (class_intf->add_dev)
				class_intf->add_dev(dev, class_intf);
		mutex_unlock(&dev->class->p->mutex);
	}
done:
	put_device(dev);
	return error;
 DPMError:
	bus_remove_device(dev);
 BusError:
	device_remove_attrs(dev);
 AttrsError:
	device_remove_class_symlinks(dev);
 SymlinkError:
	if (MAJOR(dev->devt))
		devtmpfs_delete_node(dev);
	if (MAJOR(dev->devt))
		device_remove_sys_dev_entry(dev);
 devtattrError:
	if (MAJOR(dev->devt))
		device_remove_file(dev, &devt_attr);
 ueventattrError:
	device_remove_file(dev, &uevent_attr);
 attrError:
	kobject_uevent(&dev->kobj, KOBJ_REMOVE);
	kobject_del(&dev->kobj);
 Error:
	cleanup_device_parent(dev);
	if (parent)
		put_device(parent);
name_error:
	kfree(dev->p);
	dev->p = NULL;
	goto done;
}

int device_register(struct device *dev)
{
	device_initialize(dev);
	return device_add(dev);
}

struct device *device_create(struct class *class, struct device *parent,
			     dev_t devt, void *drvdata, const char *fmt, ...)
{
	va_list vargs;
	struct device *dev;

	va_start(vargs, fmt);
	dev = device_create_vargs(class, parent, devt, drvdata, fmt, vargs);
	va_end(vargs);
	return dev;
}

/*
 * 分配内存
 * device成员赋值
 * dev->p->driver_data指向drvdata
 * device_register
 */
struct device *device_create_vargs(struct class *class, struct device *parent,
				   dev_t devt, void *drvdata, const char *fmt,
				   va_list args)
{
	struct device *dev = NULL;
	int retval = -ENODEV;

	if (class == NULL || IS_ERR(class))
		goto error;

	dev = kzalloc(sizeof(*dev), GFP_KERNEL);
	if (!dev) {
		retval = -ENOMEM;
		goto error;
	}

	dev->devt = devt;
	dev->class = class;
	dev->parent = parent;
	dev->release = device_create_release;
	dev_set_drvdata(dev, drvdata);

	retval = kobject_set_name_vargs(&dev->kobj, fmt, args);
	if (retval)
		goto error;

	retval = device_register(dev);
	if (retval)
		goto error;

	return dev;

error:
	put_device(dev);
	return ERR_PTR(retval);


四.device_driver结构体

struct device_driver {
	const char		*name;    //设备驱动的名称
	struct bus_type		*bus;   //驱动所属的总线

	struct module		*owner;   
	const char		*mod_name;	/* used for built-in modules */ 

	bool suppress_bind_attrs;	/* disables bind/unbind via sysfs */  //不在sysfs创建bind和unbind属性

	const struct of_device_id	*of_match_table;    //设备树，设备匹配列表
	const struct acpi_device_id	*acpi_match_table;

	int (*probe) (struct device *dev);    //匹配成功后执行的回调函数
	int (*remove) (struct device *dev);   //注销回调函数
	void (*shutdown) (struct device *dev);    
	int (*suspend) (struct device *dev, pm_message_t state);
	int (*resume) (struct device *dev);
	const struct attribute_group **groups;    //文件属性组

	const struct dev_pm_ops *pm;    //电源相关

	struct driver_private *p;   //driver私有数据指针，只有driver可以操作这个指针
};

struct driver_private {
	struct kobject kobj;    //基本设备模型
	struct klist klist_devices;   //匹配设备列表
	struct klist_node knode_bus;    //添加到总线的驱动列表
	struct module_kobject *mkobj;   
	struct device_driver *driver; 
};

五.driver API
/*
 * 添加驱动到总线上,driver_attach->__driver_attach->driver_probe_device->really_probe,遍历总线下的设备列表进行匹配，匹配成功则执行probe
 * 创建驱动的文件属性
 * 向用户空间上报ADD事件
 */
int driver_register(struct device_driver *drv)
{
	int ret;
	struct device_driver *other;

	BUG_ON(!drv->bus->p);

	if ((drv->bus->probe && drv->probe) ||
	    (drv->bus->remove && drv->remove) ||
	    (drv->bus->shutdown && drv->shutdown))
		printk(KERN_WARNING "Driver '%s' needs updating - please use "
			"bus_type methods\n", drv->name);

	other = driver_find(drv->name, drv->bus);
	if (other) {
		printk(KERN_ERR "Error: Driver '%s' is already registered, "
			"aborting...\n", drv->name);
		return -EBUSY;
	}

	ret = bus_add_driver(drv);
	if (ret)
		return ret;
	ret = driver_add_groups(drv, drv->groups);
	if (ret) {
		bus_remove_driver(drv);
		return ret;
	}
	kobject_uevent(&drv->p->kobj, KOBJ_ADD);

	return ret;
}

六. DEVICE_ATTR & DRIVER_ATTR
1.DEVICE_ATTR
struct device_attribute {
	struct attribute	attr;
	ssize_t (*show)(struct device *dev, struct device_attribute *attr,
			char *buf);
	ssize_t (*store)(struct device *dev, struct device_attribute *attr,
			 const char *buf, size_t count);
};
  
static struct kobj_type device_ktype = {
	.release	= device_release,
	.sysfs_ops	= &dev_sysfs_ops,
	.namespace	= device_namespace,
};

static const struct sysfs_ops dev_sysfs_ops = {
	.show	= dev_attr_show,
	.store	= dev_attr_store,
};

static ssize_t dev_attr_show(struct kobject *kobj, struct attribute *attr,
			     char *buf)
{
	struct device_attribute *dev_attr = to_dev_attr(attr);
	struct device *dev = kobj_to_dev(kobj);
	ssize_t ret = -EIO;

	if (dev_attr->show)
		ret = dev_attr->show(dev, dev_attr, buf);
	if (ret >= (ssize_t)PAGE_SIZE) {
		print_symbol("dev_attr_show: %s returned bad count\n",
				(unsigned long)dev_attr->show);
	}
	return ret;
}

static ssize_t dev_attr_store(struct kobject *kobj, struct attribute *attr,
			      const char *buf, size_t count)
{
	struct device_attribute *dev_attr = to_dev_attr(attr);
	struct device *dev = kobj_to_dev(kobj);
	ssize_t ret = -EIO;

	if (dev_attr->store)
		ret = dev_attr->store(dev, dev_attr, buf, count);
	return ret;
}

#define DEVICE_ATTR(_name, _mode, _show, _store) \
	struct device_attribute dev_attr_##_name = __ATTR(_name, _mode, _show, _store)
  
2.DRIVER_ATTR
struct driver_attribute {
	struct attribute attr;
	ssize_t (*show)(struct device_driver *driver, char *buf);
	ssize_t (*store)(struct device_driver *driver, const char *buf,
			 size_t count);
};

#define DRIVER_ATTR(_name, _mode, _show, _store) \
	struct driver_attribute driver_attr_##_name = __ATTR(_name, _mode, _show, _store)


