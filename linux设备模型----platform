platform设备一个共通点：通过cpu bus直接寻址

一.结构体

struct platform_device {
	const char	*name;    //设备name
	int		id;       //设备id
	bool		id_auto;    //自动设置id标志位
	struct device	dev;    //设备
	u32		num_resources;      //资源数量
	struct resource	*resource;    //平台设备资源：包括I/O,memory,register,irq,DMA等

	const struct platform_device_id	*id_entry;    //匹配时使用

	/* MFD cell pointer */
	struct mfd_cell *mfd_cell;

	/* arch specific additions */
	struct pdev_archdata	archdata;     //存放一些architecture的数据
};

struct platform_driver {
	int (*probe)(struct platform_device *);
	int (*remove)(struct platform_device *);
	void (*shutdown)(struct platform_device *);
	int (*suspend)(struct platform_device *, pm_message_t state);
	int (*resume)(struct platform_device *);
	struct device_driver driver;
	const struct platform_device_id *id_table;    //设备驱动match时使用，驱动支持的设备id列表
};

二.platform初始化
/*
 * init.c的driver_init调用platform_bus_init，进行初始化
 */
void __init driver_init(void)
{
	/* These are the core pieces */
	devtmpfs_init();
	devices_init();
	buses_init();
	classes_init();
	firmware_init();
	hypervisor_init();

	/* These are also core pieces, but must come after the
	 * core core pieces.
	 */
	platform_bus_init();
	cpu_dev_init();
	memory_dev_init();
}

int __init platform_bus_init(void)
{
	int error;

	early_platform_cleanup();   //清理设备链表中的devres list

	error = device_register(&platform_bus);   //注册平台设备，生成/sys/devices/platform目录
	if (error)
		return error;
	error =  bus_register(&platform_bus_type);    //注册总线，生成/sys/bus/platform目录，以及一些子目录和文件属性
	if (error)
		device_unregister(&platform_bus);
	return error;
}

struct bus_type platform_bus_type = {
	.name		= "platform",
	.dev_attrs	= platform_dev_attrs,   //平台设备属性
	.match		= platform_match,   //匹配执行函数
	.uevent		= platform_uevent,    //平台设备环境变量
	.pm		= &platform_dev_pm_ops,   //电源管理
}; 

/*
 * 注册平台设备和驱动时执行匹配函数 
 * 驱动的of_match_table -> APCI -> 驱动id_table -> 设备与驱动的name，按照此优先级执行match函数
 */

static int platform_match(struct device *dev, struct device_driver *drv)
{
	struct platform_device *pdev = to_platform_device(dev);
	struct platform_driver *pdrv = to_platform_driver(drv);

	/* Attempt an OF style match first */
	if (of_driver_match_device(dev, drv))
		return 1;

	/* Then try ACPI style match */
	if (acpi_driver_match_device(dev, drv))
		return 1;

	/* Then try to match against the id table */
	if (pdrv->id_table)
		return platform_match_id(pdrv->id_table, pdev) != NULL;

	/* fall-back to driver name match */
	return (strcmp(pdev->name, drv->name) == 0);
}


三. API

/*
 * 注册平台设备
 * 调用platform_device_add
 */
int platform_device_register(struct platform_device *pdev)
{
	device_initialize(&pdev->dev);
	arch_setup_pdev_archdata(pdev);
	return platform_device_add(pdev);
}

/*
 * 添加平台设备到设备层次模型中
 * /
int platform_device_add(struct platform_device *pdev)
{
	int i, ret;

	if (!pdev)
		return -EINVAL;
//如果未定义parent，则默认在/sys/devices/platform/目录下
	if (!pdev->dev.parent)
		pdev->dev.parent = &platform_bus;
//总线设置为平台总线
	pdev->dev.bus = &platform_bus_type;
//根据id确定在文件系统中的显示name，默认为pdev->name##pdev->id
	switch (pdev->id) {
	default:
		dev_set_name(&pdev->dev, "%s.%d", pdev->name,  pdev->id);
		break;
	case PLATFORM_DEVID_NONE:
		dev_set_name(&pdev->dev, "%s", pdev->name);
		break;
	case PLATFORM_DEVID_AUTO:
		/*
		 * Automatically allocated device ID. We mark it as such so
		 * that we remember it must be freed, and we append a suffix
		 * to avoid namespace collision with explicit IDs.
		 */
		ret = ida_simple_get(&platform_devid_ida, 0, 0, GFP_KERNEL);
		if (ret < 0)
			goto err_out;
		pdev->id = ret;
		pdev->id_auto = true;
		dev_set_name(&pdev->dev, "%s.%d.auto", pdev->name, pdev->id);
		break;
	}
//遍历资源，添加到资源树中
	for (i = 0; i < pdev->num_resources; i++) {
		struct resource *p, *r = &pdev->resource[i];

		if (r->name == NULL)
			r->name = dev_name(&pdev->dev);

		p = r->parent;
		if (!p) {
			if (resource_type(r) == IORESOURCE_MEM)
				p = &iomem_resource;
			else if (resource_type(r) == IORESOURCE_IO)
				p = &ioport_resource;
		}

		if (p && insert_resource(p, r)) {
			dev_err(&pdev->dev, "failed to claim resource %d\n", i);
			ret = -EBUSY;
			goto failed;
		}
	}

	pr_debug("Registering platform device '%s'. Parent at %s\n",
		 dev_name(&pdev->dev), dev_name(pdev->dev.parent));
//添加设备到内核中
	ret = device_add(&pdev->dev);
	if (ret == 0)
		return ret;

 failed:
	if (pdev->id_auto) {
		ida_simple_remove(&platform_devid_ida, pdev->id);
		pdev->id = PLATFORM_DEVID_AUTO;
	}

	while (--i >= 0) {
		struct resource *r = &pdev->resource[i];
		unsigned long type = resource_type(r);

		if (type == IORESOURCE_MEM || type == IORESOURCE_IO)
			release_resource(r);
	}

 err_out:
	return ret;
}


/**
 * platform_device_alloc - 创建平台设备
 * name和id分别赋值给pdev的成员
 * strcpy复制包含name末尾的空字符'\0'，strlen（name）不包含空字符，所以结构体platform_object中预留一个字节的空间。
 */
struct platform_device *platform_device_alloc(const char *name, int id)
{
	struct platform_object *pa;

	pa = kzalloc(sizeof(struct platform_object) + strlen(name), GFP_KERNEL);
	if (pa) {
		strcpy(pa->name, name);
		pa->pdev.name = pa->name;
		pa->pdev.id = id;
		device_initialize(&pa->pdev.dev);
		pa->pdev.dev.release = platform_device_release;
		arch_setup_pdev_archdata(&pa->pdev);
	}

	return pa ? &pa->pdev : NULL;
}

struct platform_object {
	struct platform_device pdev;
	char name[1];
};

/*
 * 获取平台资源
 */
struct resource *platform_get_resource(struct platform_device *dev,
				       unsigned int type, unsigned int num)
{
	int i;

	for (i = 0; i < dev->num_resources; i++) {
		struct resource *r = &dev->resource[i];

		if (type == resource_type(r) && num-- == 0)
			return r;
	}
	return NULL;
}

/*
 * 获取中断资源即中断号
 */
int platform_get_irq(struct platform_device *dev, unsigned int num)
{
#ifdef CONFIG_SPARC
	/* sparc does not have irqs represented as IORESOURCE_IRQ resources */
	if (!dev || num >= dev->archdata.num_irqs)
		return -ENXIO;
	return dev->archdata.irqs[num];
#else
	struct resource *r = platform_get_resource(dev, IORESOURCE_IRQ, num);

	return r ? r->start : -ENXIO;
#endif
}

/**
 * platform_driver_register - 注册平台设备驱动
 * drv->driver的总线类型为platform
 * 如果定义了drv->probe，则执行platform_drv_probe，最终调用drv->probe函数
 */
int platform_driver_register(struct platform_driver *drv)
{
	drv->driver.bus = &platform_bus_type;
	if (drv->probe)
		drv->driver.probe = platform_drv_probe;
	if (drv->remove)
		drv->driver.remove = platform_drv_remove;
	if (drv->shutdown)
		drv->driver.shutdown = platform_drv_shutdown;

	return driver_register(&drv->driver);
}
/*
 * 调用drv->probe函数
 */
static int platform_drv_probe(struct device *_dev)
{
	struct platform_driver *drv = to_platform_driver(_dev->driver);
	struct platform_device *dev = to_platform_device(_dev);
	int ret;

	if (ACPI_HANDLE(_dev))
		acpi_dev_pm_attach(_dev, true);

	ret = drv->probe(dev);
	if (ret && ACPI_HANDLE(_dev))
		acpi_dev_pm_detach(_dev, true);

	return ret;
}


/*
 * platform_driver_probe - 注册驱动应用非热插拔的设备
 * 应用场合：设备非热插拔，已经在系统中注册，并且希望驱动与设备匹配后释放probe空间
 */
int __init_or_module platform_driver_probe(struct platform_driver *drv,
		int (*probe)(struct platform_device *))
{
	int retval, code;

	/* make sure driver won't have bind/unbind attributes */
	drv->driver.suppress_bind_attrs = true;

	/* temporary section violation during probe() */
	drv->probe = probe;
	retval = code = platform_driver_register(drv);

	/*
	 * Fixup that section violation, being paranoid about code scanning
	 * the list of drivers in order to probe new devices.  Check to see
	 * if the probe was successful, and make sure any forced probes of
	 * new devices fail.
	 */
	spin_lock(&drv->driver.bus->p->klist_drivers.k_lock);
	drv->probe = NULL;
	if (code == 0 && list_empty(&drv->driver.p->klist_devices.k_list))
		retval = -ENODEV;
	drv->driver.probe = platform_drv_probe_fail;
	spin_unlock(&drv->driver.bus->p->klist_drivers.k_lock);

	if (code != retval)
		platform_driver_unregister(drv);
	return retval;
}

/* 
 * platform_create_bundle - 注册平台驱动并且创建对应的设备
 * 这个函数可以实现驱动和设备的注册，方便
 */
struct platform_device * __init_or_module platform_create_bundle(
			struct platform_driver *driver,
			int (*probe)(struct platform_device *),
			struct resource *res, unsigned int n_res,
			const void *data, size_t size)
{
	struct platform_device *pdev;
	int error;

	pdev = platform_device_alloc(driver->driver.name, -1);
	if (!pdev) {
		error = -ENOMEM;
		goto err_out;
	}

	error = platform_device_add_resources(pdev, res, n_res);
	if (error)
		goto err_pdev_put;

	error = platform_device_add_data(pdev, data, size);
	if (error)
		goto err_pdev_put;

	error = platform_device_add(pdev);
	if (error)
		goto err_pdev_put;

	error = platform_driver_probe(driver, probe);
	if (error)
		goto err_pdev_del;

	return pdev;

err_pdev_del:
	platform_device_del(pdev);
err_pdev_put:
	platform_device_put(pdev);
err_out:
	return ERR_PTR(error);
}

/*
 * 获取/设置dev的私有数据
 * 用来存放平台相关的结构体
 */

static inline void *platform_get_drvdata(const struct platform_device *pdev)
{
	return dev_get_drvdata(&pdev->dev);
}

static inline void platform_set_drvdata(struct platform_device *pdev,
					void *data)
{
	dev_set_drvdata(&pdev->dev, data);
}


四.early platform API
目前还没用到过。。。这块直接转自蜗窝科技
内核启动时，要完成一定的初始化操作之后，才会处理device和driver的注册及probe，因此在这之前，常规的platform设备是无法使用的。
但是在Linux中，有些设备需要尽早使用（如在启动过程中充当console输出的serial设备），所以platform模块提供了一种称作Early platform device/driver的机制，
允许驱动开发人员，在开发驱动时，向内核注册可在内核早期启动过程中使用的driver。这些机制提供了如下接口：
early_platform_driver_register，注册一个用于Early device的driver。
early_platform_add_devices，添加一个Early device。
is_early_platform_device，判断指定的device是否是Early device。
early_platform_driver_register_all，将指定class的所有driver注册为Early device driver。
early_platform_driver_probe，probe指定class的Early device。
early_platform_cleanup，清除所有的Early device/driver。

五. 驱动编写
经常看到如下的驱动注册：
module_platform_driver(ldb_driver);
/*
 * 调用module_driver宏
 */
#define module_platform_driver(__platform_driver) \
	module_driver(__platform_driver, platform_driver_register, \
			platform_driver_unregister)
/*
 * 驱动初始化和卸载，分别调用platform_driver_register，platform_driver_unregister
 */
#define module_driver(__driver, __register, __unregister, ...) \
static int __init __driver##_init(void) \
{ \
	return __register(&(__driver) , ##__VA_ARGS__); \
} \
module_init(__driver##_init); \
static void __exit __driver##_exit(void) \
{ \
	__unregister(&(__driver) , ##__VA_ARGS__); \
} \
module_exit(__driver##_exit);

以上的例子可以解析成如下,这样就熟悉多了.
static int __init ldb_driver_init(void) 
{ 
	return platform_driver_register(&ldb_driver); 
} 
module_init(ldb_driver_init); 
static void __exit ldb_driver_exit(void) 
{ 
	platform_driver_unregister(&ldb_driver); 
} 
module_exit(ldb_driver_exit);
